<?php
/**
 * @file
 * Install, update and uninstall functions for the spark install profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function spark_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <br> <p> <img> <pre>',
        ),
      ),
      // Caption filter.
      'caption' => array(
        'weight' => 5,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // Caption filter.
      'caption' => array(
        'weight' => 5,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable Bartik theme and set it as default theme instead of Stark.
  // @see system_install()
  $default_theme = 'bartik';
  variable_set('theme_default', $default_theme);
  theme_enable(array($default_theme));
  theme_disable(array('stark'));

  // Set front page to "node".
  config('system.site')->set('page.front', 'node')->save();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Allow visitor account creation with administrative approval.
  $user_settings = config('user.settings');
  $user_settings->set('register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)->save();

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = entity_create('taxonomy_vocabulary', array(
    'name' => st('Tags'),
    'description' => $description,
    'vid' => 'tags',
    'langcode' => language_default()->langcode,
    'help' => $help,
  ));
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->id(),
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->id(),
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->id(),
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
  );
  field_create_instance($instance);

  // Assign display settings for the 'default' and 'teaser' view modes.
  entity_get_display('node', 'article', 'default')
    ->setComponent($instance['field_name'], array(
      'type' => 'taxonomy_term_reference_link',
      'weight' => 10,
    ))
    ->save();
  entity_get_display('node', 'article', 'teaser')
    ->setComponent($instance['field_name'], array(
      'type' => 'taxonomy_term_reference_link',
      'weight' => 10,
    ))
    ->save();

  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/8

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/8
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),
  );
  field_create_instance($instance);

  // Assign display settings for the 'default' and 'teaser' view modes.
  entity_get_display('node', 'article', 'default')
    ->setComponent($instance['field_name'], array(
      'label' => 'hidden',
      'type' => 'image',
      'settings' => array('image_style' => 'large', 'image_link' => ''),
      'weight' => -1,
    ))
    ->save();
  entity_get_display('node', 'article', 'teaser')
    ->setComponent($instance['field_name'], array(
      'label' => 'hidden',
      'type' => 'image',
      'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
      'weight' => -1,
    ))
    ->save();

  // Create user picture field.
  module_load_install('user');
  user_install_picture_field();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->rid = 'administrator';
  $admin_role->name = 'Administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  $user_settings->set('admin_role', $admin_role->rid)->save();

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main',
  );
  menu_link_save($item);

  // Enable the Contact link in the footer menu.
  menu_link_maintain('system', 'enable', 'contact');
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access site-wide contact form'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access site-wide contact form'));

  // Populate the default shortcut set.
  $shortcut_set = shortcut_set_load(SHORTCUT_DEFAULT_SET_NAME);
  $shortcut_set->links[] = array(
    'link_path' => 'node/add',
    'link_title' => st('Add content'),
    'weight' => -20,
  );
  $shortcut_set->links[] = array(
    'link_path' => 'admin/content',
    'link_title' => st('Find content'),
    'weight' => -19,
  );
  shortcut_set_save($shortcut_set);

  // Enable the admin theme.
  theme_enable(array('seven'));
  config('system.theme')->set('admin', 'seven')->save();
  variable_set('node_admin_theme', '1');


  // Clear zee cache.
  filter_formats_reset();

  // Create an "About Us" page, for testing content links in Aloha.
  // @todo: It's really stupid we have to do this here instead of in spark_demo module,
  // but 'page' doesn't exist yet when spark_demo_install() runs. :(
  $t = get_t();

  $node = entity_create('node', array());
  $node->uid = 1;
  $node->type = 'page';
  $node->status = 1;
  $node->title = $t('About Us');
  $node->body['und'][0]['value'] = $t('Collaboratively administrate empowered markets via plug-and-play networks. Dynamically procrastinate B2C users after installed base benefits. Dramatically visualize customer directed convergence without revolutionary ROI.

Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas. Dramatically maintain clicks-and-mortar solutions without functional solutions.

Completely synergize resource sucking relationships via premier niche markets. Professionally cultivate one-to-one customer service with robust ideas. Dynamically innovate resource-leveling customer service for state of the art customer service.');
  $node->body['und'][0]['format'] = 'filtered_html';
  $node->menu = array (
    'enabled' => 1,
    'mlid' => 0,
    'module' => 'menu',
    'hidden' => 0,
    'has_children' => 0,
    'customized' => 0,
    'options' =>
    array (
    ),
    'expanded' => 0,
    'parent_depth_limit' => 8,
    'link_title' => $t('About Us'),
    'description' => '',
    'parent' => 'main-menu:0',
    'weight' => '1',
    'plid' => '0',
    'menu_name' => 'main-menu',
  );

  node_save($node);

  // Create a new 'article' node for testing editing.
  $node = entity_create('node', array());
  $node->uid = 1;
  $node->type = 'article';
  $node->status = 1;
  $node->promote = 1;

  // Title and body.
  // @todo: It would be great to just show this as full node rather than having
  // to do this "Read More" business. Blocked by http://drupal.org/node/1723126.
  $node->title = $t('Welcome to Spark!');
  $node->body['und'][0]['value'] = $t('Welcome to a pre-release version of the <a href="@spark-project-url">Spark distribution</a>! This distribution ties together all of our current D8 core and contrib work into a single distribution to it off. Our goal is to greatly improve the authoring experience of Drupal, through a Drupal 7 distribution that can be used today, but can also be proposed as Drupal 8 core improvements for tomorrow. You can read more about it at <a href="@spark-announce-url">the official announcement</a> or at <a href="@spark-microsite-url">www.sparkdrupal.com</a>. Read on for more info!

<img src="http://drupal.org/files/imagecache/grid-3/project-images/spark_logo.png" alt="Spark Logo" width="193" height="100" data-caption="The Spark logo, complete with a lovely image caption." data-align="right">

Here are the current features of Spark D8:

<ul>
  <li><strong>"True" WYSIWYG</strong>, courtesy of <a href="@aloha-url">Aloha Editor</a>. Just click "Edit" on this node to check it out. See http://drupal.org/node/1706688 for the "meta" issue on this, for ways in which you can help!</li>
  <li><strong>Responsive Layout Builder</strong>, courtesy of the <a href="@module-layout-url">Layout</a>, <a href="@module-region-url">Region</a>, <a href="@module-bunnypoint-url">Bunnypoint</a>, and <a href="@module-grid-url">Gridbuilder</a> modules. While core doesn\'t currently have anything to tie these layouts to (we\'re working on the underpinnings in http://drupal.org/node/1787634 — please join us!), you can play around with these modules under Administer >> Structure.</li>
  <li><strong>Mobile-friendly toolbar</strong> Hey, speaking of navigating, there\'s a new toolbar design from http://drupal.org/node/1137920, intended to work well with mobile browsers and desktops alike! Check it out. :)</li>
</ul>

We hope you enjoy playing with Spark! We greatly welcome collaboration; join us in the <a href="@spark-issues-url">issue queue</a>!', array(
  '@spark-project-url' => 'http://drupal.org/project/spark',
  '@spark-announce-url' => 'http://buytaert.net/announcing-spark-authoring-improvements-for-drupal-7-and-drupal-8',
  '@spark-microsite-url' => 'http://www.sparkdrupal.com/',
  '@spark-issues-url' => 'http://drupal.org/project/issues/spark',
  '@module-edit-url' => 'http://drupal.org/project/edit',
  '@module-layout-url' => 'http://drupal.org/project/layout',
  '@module-region-url' => 'http://drupal.org/project/region',
  '@module-bunnypoint-url' => 'http://drupal.org/project/bunnypoint',
  '@module-grid-url' => 'http://drupal.org/project/gridbuilder',
  '@theme-ember-url' => 'http://drupal.org/project/ember',
  '@aloha-url' => 'http://aloha-editor.org/',
  '@admin-layout-url' => url('admin/structure/panels/layouts/list/default/edit'),
));
  $node->body['und'][0]['format'] = 'filtered_html';

  // Taxonomy.
  $node->field_tags['und'] = array(
    array(
      'tid' => 'autocreate',
      'vid' => 1,
      'name' => 'tag 1',
      'vocabulary_machine_name' => 'tags',
    ),
    array(
      'tid' => 'autocreate',
      'vid' => 1,
      'name' => 'another tag',
      'vocabulary_machine_name' => 'tags',
    ),
    array(
      'tid' => 'autocreate',
      'vid' => 1,
      'name' => 'yet another tag',
      'vocabulary_machine_name' => 'tags',
    ),
  );

  node_save($node);
}
